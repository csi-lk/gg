#!/usr/bin/env bash

VERSION="1.0.0"

# Colors and formatting
# --------------------------------------------------------------------

grey() {
	printf "\e[0;90m$1\e[0m"
}

green() {
	printf "\e[0;32m$1\e[0m"
}

red() {
	printf "\e[1;31m$1\e[0m"
}

yellow() {
	printf "\e[0;33m$1\e[0m"
}

blue() {
	printf "\e[0;36m$1\e[0m"
}

# Utility
# --------------------------------------------------------------------

current_branch() {
	git symbolic-ref --short HEAD
}

all_branches() {
	clear
	branches=$(git for-each-ref --format='%(refname:short)' refs/heads/)
	branches_array=()
	echo $(blue "All Branches:")
	while read -r line; do
		branches_array+=("$line")
	done <<< "$branches"
		for branch in "${branches_array[@]}"; do
			if [ "$branch" == "$(current_branch)" ]; then
				printf "|- "
				green "$branch\n"
			else
				printf "\e[2m|- %s\n\e[22m" "$branch"
			fi
		done
}

all_tags() {
	clear
	tags=$(git tag)
	tags_array=()
	echo $(blue "All Tags:")
	while read -r line; do
		tags_array+=("$line")
	done <<< "$tags"
		for tag in "${tags_array[@]}"; do
			printf "\e[2m|- %s\n\e[22m" "$tag"
		done
}

number_of_commits() {
	git rev-list --count HEAD ^master
}

repo_url() {
	origin=$(git remote get-url origin)
	url=${origin/.git} # remove .git
	# Github
	url=${url/ssh:\/\/git@github.com\//https://github.com/} # if ssh path replace with https
	url=${url/git@github.com:/https://github.com/} # if git path replace with https
	# Gitlab
	url=${url/ssh:\/\/git@gitlab.com\//https://gitlab.com/} # if ssh path replace with https
	url=${url/git@gitlab.com:/https://gitlab.com/} # if git path replace with https
	echo $url
}

err_missing_param() {
	cat <<-EOF

	$(red "Missing parameter: $1")
		$(green "gg") $(yellow "$2") $(red "<$1>")

EOF
	exit 1
}

unknown_command() {
	cat <<-EOF

	$(red "Unknown command: '$1'")

EOF
	exit 1
}

# Commands
# --------------------------------------------------------------------

init() {
	# TODO: Color output
	clear
	output=($(git init))
	green "\n${output[0]} ${output[1]} Git repository.\n\n"
}

status() {
	# TODO: Color output
	clear
	git status
}

fetch() {
	echo $(green "Fetching...")
	git fetch
}

add() {
	if [ -z "$1" ]; then
		git add -A
		echo $(green "Added all files")
	else
		toAdd="$1"
		echo $(green "Added: $toAdd")
		git add $toAdd
	fi
	git status
}

commit() {
	echo $(blue "Let's get committing...")
	read -n 1 -ep "$(grey "Commit type: (f)eature, fi(x), (b)uild, (c)hore, c(i), (d)ocs, (s)tyle, (p)erformance, (t)est - ")" commit_type;
	case $commit_type in
		"f"|"F")
			commit_type="feat";;
		"x"|"X")
			commit_type="fix";;
		"b"|"B")
			commit_type="build";;
		"c"|"C")
			commit_type="chore";;
		"i"|"I")
			commit_type="ci";;
		"d"|"D")
			commit_type="docs";;
		"s"|"S")
			commit_type="style";;
		"p"|"P")
			commit_type="perf";;
		"t"|"T")
			commit_type="test";;
		*) 
			echo "invalid commit type chosen, please chose one of: (f)eature, fi(x), (b)uild, (c)hore, c(i), (d)ocs, (s)tyle, (p)erformance, (t)est"
			exit 1;;
	esac
	# "$(echo -e $BOLD$YELLOW"foo bar "$RESET)"
	read -ep "$(grey "Scope?: ")" input_scope
	if [[ -z "$input_scope" ]];
		then 
			commit_scope=""
		else
			commit_scope="($input_scope)"
	fi
	while [[ -z "$commit_first_line" ]]
		do
			read -ep "$(grey "First Line: ")" commit_first_line
	done
	while [[ -z "$commit_body" ]]
		do
			read -ep "$(grey "Body: ")" commit_body
	done
	read -ep "$(grey "Ticket: ")" commit_ticket
	echo $(green "Creating Commit...")
	echo $(grey "  $commit_type$commit_scope: $commit_first_line")
	echo $(grey "  $commit_body")
	echo $(grey "  $commit_ticket")
	git commit -m "$commit_type$commit_scope: $commit_first_line" -m "$commit_body" -m "$commit_ticket"
}

commit_amend() {
	git commit --amend
}

commit_amend_no_edit() {
	git commit --amend --no-edit
}

checkout() {
	# TODO: Color output
	# TODO: Success message
	if [ -z "$1" ]; then
		err_missing_param "thing to checkout" "ch"
		exit 1
	else
		checkoutItem="$1"
		git checkout $checkoutItem
	fi
}

pull() {
	# TODO: Color output eg. https://github.com/qw3rtman/gg/blob/7bb8a485fe8c9e52723931dc4713be656a894944/bin/gg#L466
	git pull
}

push() {
	# TODO: Color output
	# TODO: Check if anything to push
	git push --set-upstream origin $(current_branch)
}

push_force() {
	# TODO: Color output
	echo $(red "Strap in, we're force pushing...")
	git push --force
}

log() {
	clear
	git log -35 --pretty=format:"%C(auto,yellow)%h%C(auto,magenta)% G?%C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(15,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D" --date=short
}

pull_request_log() {
	clear
	grey "Log output for PR...\n\n"
	pr_log=$(git log master.. --pretty=format:"%s%n%n%b")
	echo -e "$pr_log \n"
	echo "$pr_log" | pbcopy
	green "Copied to clipboard\n\n"
}

latest_commit_message() {
	git log --pretty=format:"%C(auto,yellow)%h%C(auto,magenta)% G?%C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(15,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D" --date=short
}

fetch_rebase_master() {
	fetch
	git rebase origin/master
}

rebase() {
	if [ -z "$1" ]; then
		numCommits=$(number_of_commits)
	else
		numCommits="$1"
	fi
	git rebase HEAD~$numCommits -i
}

rebase_continue() {
	git rebase --continue
}

stash() {
	git add -A && git stash
}

stashpop() {
	git stash pop
}

clean() {
	clear
	echo $(green "Cleaning all branches that do not exist on remote:")
	git remote prune origin
	git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d
	echo $(green "Done") && sleep 4
	all_branches
}

branch() {
	# TODO: Color output
	# TODO: Handle branch already existing
	if [ -z "$1" ]; then
		all_branches
	else
		git checkout -b $1
	fi
}

branch_delete() {
	# TODO: Color output
	# TODO: Handle branch not existing for delete
	if [ -z "$1" ]; then
		err_missing_param "branch name to delete" "bd"
	else
		git branch -D $1
	fi
}

commit_fixup() {
	# TODO: Handle scoping
	if [ -z "$1" ]; then
		err_missing_param "scope to commit fixup" "cf"
	else
		echo $(green "Creating fixup commit for $1:")
		git commit -m "fixup $1" --no-verify
		rebase $(number_of_commits)
	fi
}

pull_request() {
	echo $(green "Opening pull request for branch: $(current_branch)")
	case "$(repo_url)" in 
		*github*)
			open "$(repo_url)/compare/$(current_branch)?quick_pull=1"
		;;
		*gitlab*)
			open "$(repo_url)/-/merge_requests/new?merge_request%5Bsource_branch%5D=$(current_branch)"
		;;
	esac
}

open_url() {
	echo $(green "Opening repo url: $(repo_url)")
	open $(repo_url)
}

tag() {
	# TODO: Color output
	# TODO: Handle tag already existing
	if [ -z "$1" ]; then
		all_tags
	else
		git tag $1
	fi
}

tag_delete() {
	# TODO: Color output
	# TODO: Handle tag not existing to delete
	if [ -z "$1" ]; then
		err_missing_param "tag name to delete" "td"
	else
		git tag -d $1
	fi
}

display_help() {
	cat <<-EOF

	$(green "gg") Â» simple git aliases $(grey "by Callum Silcock")

	$(green "gg") $(yellow "i")          $(grey "|") git init
	$(green "gg") $(yellow "s")          $(grey "|") git status
	$(green "gg") $(yellow "f")          $(grey "|") git fetch
	$(green "gg") $(yellow "a")          $(grey "|") git add -A
	$(green "gg") $(yellow "a <file>")   $(grey "|") git add <file>
	$(green "gg") $(yellow "c")          $(grey "|") git commit (prompts for conventional commit style commits)
	$(green "gg") $(yellow "ca")         $(grey "|") git commit --amend
	$(green "gg") $(yellow "can")        $(grey "|") git commit --amend --no-edit
	$(green "gg") $(yellow "ch <thing>") $(grey "|") git checkout <thing>
	$(green "gg") $(yellow "pl")         $(grey "|") git pull
	$(green "gg") $(yellow "cpr")        $(grey "|") git fetch && git rebase origin/master
	$(green "gg") $(yellow "p")          $(grey "|") git push
	$(green "gg") $(yellow "pf")         $(grey "|") git push force
	$(green "gg") $(yellow "l")          $(grey "|") git history oneline
	$(green "gg") $(yellow "lc")         $(grey "|") git history latest commit
	$(green "gg") $(yellow "r <number>") $(grey "|") git rebase HEAD~<number> -i
	$(green "gg") $(yellow "st")         $(grey "|") add all files and stash
	$(green "gg") $(yellow "stp")        $(grey "|") stash pop latest
	$(green "gg") $(yellow "clean")      $(grey "|") delete local branches not on master
	$(green "gg") $(yellow "b <name>")   $(grey "|") create and checkout branch <name>, if exists check it out
	$(green "gg") $(yellow "bd <name>")  $(grey "|") delete branch
	$(green "gg") $(yellow "cf <scope>") $(grey "|") git commit fixup <scope>
	$(green "gg") $(yellow "o")          $(grey "|") open repo url
	$(green "gg") $(yellow "pr")         $(grey "|") create new github pull request for current branch
	$(green "gg") $(yellow "prl")        $(grey "|") output changed since master in easy pull request format
	$(green "gg") $(yellow "t")          $(grey "|") create a tag
	$(green "gg") $(yellow "td <name>")  $(grey "|") delete a tag <name>

EOF
	exit 0
}

# Interface
# --------------------------------------------------------------------

if test $# -eq 0; then
	display_help
else
	while test $# -ne 0; do
		case $1 in
			i|init) init ;;
			s|status) status ;;
			f|fetch) fetch ;;
			a|add) add $2; exit ;;
			c|commit) commit ;;
			ca|commit_amend) commit_amend ;;
			can|commit_amend_no_edit) commit_amend_no_edit ;;
			ch|checkout) checkout $2; exit ;;
			pl|pull) pull ;;
			cpr|fetch_rebase_master) fetch_rebase_master ;;
			p|push) push ;;
			pf|fp|force|pushforce) push_force ;;
			l|log|hist|history) log ;;
			lc|latest|latest_commit) latest_commit_message ;;
			r|rebase) rebase $2; exit ;;
			rc|continue) rebase_continue ;;
			st|stash) stash ;;
			stp|stashpop) stashpop ;;
			clean|cleanup) clean ;;
			b|branch) branch $2; exit ;;
			bd|branch_delete) branch_delete $2; exit ;;
			cf|fix|fixup) commit_fixup $2; exit ;;
			pr|pullrequest) pull_request ;;
			prl|pullrequestlog) pull_request_log ;;
			o|open) open_url ;;
			t|tag) tag $2; exit ;;
			td|tagdelete) tag_delete $2; exit ;;
			-h|--help|help) display_help ;;
			*) unknown_command "$@"; exit 1 ;;
		esac
		shift
	done
fi